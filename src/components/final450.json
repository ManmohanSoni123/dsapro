{
    "0": {
        "0": null,
        "1": null,
        "2": "Topic:",
        "3": null,
        "4": "Array",
        "5": "Array",
        "6": "Array",
        "7": "Array",
        "8": "Array",
        "9": "Array",
        "10": "Array",
        "11": "Array",
        "12": "Array",
        "13": "Array",
        "14": "Array",
        "15": "Array",
        "16": "Array",
        "17": "Array",
        "18": "Array",
        "19": "Array",
        "20": "Array",
        "21": "Array",
        "22": "Array",
        "23": "Array",
        "24": "Array",
        "25": "Array",
        "26": "Array",
        "27": "Array",
        "28": "Array",
        "29": "Array",
        "30": "Array",
        "31": "Array",
        "32": "Array",
        "33": "Array",
        "34": "Array",
        "35": "Array",
        "36": "Array",
        "37": "Array",
        "38": "Array",
        "39": "Array",
        "40": null,
        "41": null,
        "42": "Matrix",
        "43": "Matrix",
        "44": "Matrix",
        "45": "Matrix",
        "46": "Matrix",
        "47": "Matrix",
        "48": "Matrix",
        "49": "Matrix",
        "50": "Matrix",
        "51": "Matrix",
        "52": null,
        "53": null,
        "54": "String",
        "55": "String",
        "56": "String",
        "57": "String",
        "58": "String",
        "59": "String",
        "60": "String",
        "61": "String",
        "62": "String",
        "63": "String",
        "64": "String",
        "65": "String",
        "66": "String",
        "67": "String",
        "68": "String",
        "69": "String",
        "70": "String",
        "71": "String",
        "72": "String",
        "73": "String",
        "74": "String",
        "75": "String",
        "76": "String",
        "77": "String",
        "78": "String",
        "79": "String",
        "80": "String",
        "81": "String",
        "82": "String",
        "83": "String",
        "84": "String",
        "85": "String",
        "86": "String",
        "87": "String",
        "88": "String",
        "89": "String",
        "90": "String",
        "91": "String",
        "92": "String",
        "93": "String",
        "94": "String",
        "95": "String",
        "96": "String",
        "97": null,
        "98": null,
        "99": "Searching & Sorting",
        "100": "Searching & Sorting",
        "101": "Searching & Sorting",
        "102": "Searching & Sorting",
        "103": "Searching & Sorting",
        "104": "Searching & Sorting",
        "105": "Searching & Sorting",
        "106": "Searching & Sorting",
        "107": "Searching & Sorting",
        "108": "Searching & Sorting",
        "109": "Searching & Sorting",
        "110": "Searching & Sorting",
        "111": "Searching & Sorting",
        "112": "Searching & Sorting",
        "113": "Searching & Sorting",
        "114": "Searching & Sorting",
        "115": "Searching & Sorting",
        "116": "Searching & Sorting",
        "117": "Searching & Sorting",
        "118": "Searching & Sorting",
        "119": "Searching & Sorting",
        "120": "Searching & Sorting",
        "121": "Searching & Sorting",
        "122": "Searching & Sorting",
        "123": "Searching & Sorting",
        "124": "Searching & Sorting",
        "125": "Searching & Sorting",
        "126": "Searching & Sorting",
        "127": "Searching & Sorting",
        "128": "Searching & Sorting",
        "129": "Searching & Sorting",
        "130": "Searching & Sorting",
        "131": "Searching & Sorting",
        "132": "Searching & Sorting",
        "133": "Searching & Sorting",
        "134": "Searching & Sorting",
        "135": null,
        "136": null,
        "137": "LinkedList",
        "138": "LinkedList",
        "139": "LinkedList",
        "140": "LinkedList",
        "141": "LinkedList",
        "142": "LinkedList",
        "143": "LinkedList",
        "144": "LinkedList",
        "145": "LinkedList",
        "146": "LinkedList",
        "147": "LinkedList",
        "148": "LinkedList",
        "149": "LinkedList",
        "150": "LinkedList",
        "151": "LinkedList",
        "152": "LinkedList",
        "153": "LinkedList",
        "154": "LinkedList",
        "155": "LinkedList",
        "156": "LinkedList",
        "157": "LinkedList",
        "158": "LinkedList",
        "159": "LinkedList",
        "160": "LinkedList",
        "161": "LinkedList",
        "162": "LinkedList",
        "163": "LinkedList",
        "164": "LinkedList",
        "165": "LinkedList",
        "166": "LinkedList",
        "167": "LinkedList",
        "168": "LinkedList",
        "169": "LinkedList",
        "170": "LinkedList",
        "171": "LinkedList",
        "172": "LinkedList",
        "173": null,
        "174": null,
        "175": "Binary Trees",
        "176": "Binary Trees",
        "177": "Binary Trees",
        "178": "Binary Trees",
        "179": "Binary Trees",
        "180": "Binary Trees",
        "181": "Binary Trees",
        "182": "Binary Trees",
        "183": "Binary Trees",
        "184": "Binary Trees",
        "185": "Binary Trees",
        "186": "Binary Trees",
        "187": "Binary Trees",
        "188": "Binary Trees",
        "189": "Binary Trees",
        "190": "Binary Trees",
        "191": "Binary Trees",
        "192": "Binary Trees",
        "193": "Binary Trees",
        "194": "Binary Trees",
        "195": "Binary Trees",
        "196": "Binary Trees",
        "197": "Binary Trees",
        "198": "Binary Trees",
        "199": "Binary Trees",
        "200": "Binary Trees",
        "201": "Binary Trees",
        "202": "Binary Trees",
        "203": "Binary Trees",
        "204": "Binary Trees",
        "205": "Binary Trees",
        "206": "Binary Trees",
        "207": "Binary Trees",
        "208": "Binary Trees",
        "209": "Binary Trees",
        "210": null,
        "211": null,
        "212": "Binary Search Trees",
        "213": "Binary Search Trees",
        "214": "Binary Search Trees",
        "215": "Binary Search Trees",
        "216": "Binary Search Trees",
        "217": "Binary Search Trees",
        "218": "Binary Search Trees",
        "219": "Binary Search Trees",
        "220": "Binary Search Trees",
        "221": "Binary Search Trees",
        "222": "Binary Search Trees",
        "223": "Binary Search Trees",
        "224": "Binary Search Trees",
        "225": "Binary Search Trees",
        "226": "Binary Search Trees",
        "227": "Binary Search Trees",
        "228": "Binary Search Trees",
        "229": "Binary Search Trees",
        "230": "Binary Search Trees",
        "231": "Binary Search Trees",
        "232": "Binary Search Trees",
        "233": "Binary Search Trees",
        "234": null,
        "235": null,
        "236": "Greedy",
        "237": "Greedy",
        "238": "Greedy",
        "239": "Greedy",
        "240": "Greedy",
        "241": "Greedy",
        "242": "Greedy",
        "243": "Greedy",
        "244": "Greedy",
        "245": "Greedy",
        "246": "Greedy",
        "247": "Greedy",
        "248": "Greedy",
        "249": "Greedy",
        "250": "Greedy",
        "251": "Greedy",
        "252": "Greedy",
        "253": "Greedy",
        "254": "Greedy",
        "255": "Greedy",
        "256": "Greedy",
        "257": "Greedy",
        "258": "Greedy",
        "259": "Greedy",
        "260": "Greedy",
        "261": "Greedy",
        "262": "Greedy",
        "263": "Greedy",
        "264": "Greedy",
        "265": "Greedy",
        "266": "Greedy",
        "267": "Greedy",
        "268": "Greedy",
        "269": "Greedy",
        "270": "Greedy",
        "271": null,
        "272": null,
        "273": "BackTracking",
        "274": "BackTracking",
        "275": "BackTracking",
        "276": "BackTracking",
        "277": "BackTracking",
        "278": "BackTracking",
        "279": "BackTracking",
        "280": "BackTracking",
        "281": "BackTracking",
        "282": "BackTracking",
        "283": "BackTracking",
        "284": "BackTracking",
        "285": "BackTracking",
        "286": "BackTracking",
        "287": "BackTracking",
        "288": "BackTracking",
        "289": "BackTracking",
        "290": "BackTracking",
        "291": "BackTracking",
        "292": null,
        "293": null,
        "294": "Stacks & Queues",
        "295": "Stacks & Queues",
        "296": "Stacks & Queues",
        "297": "Stacks & Queues",
        "298": "Stacks & Queues",
        "299": "Stacks & Queues",
        "300": "Stacks & Queues",
        "301": "Stacks & Queues",
        "302": "Stacks & Queues",
        "303": "Stacks & Queues",
        "304": "Stacks & Queues",
        "305": "Stacks & Queues",
        "306": "Stacks & Queues",
        "307": "Stacks & Queues",
        "308": "Stacks & Queues",
        "309": "Stacks & Queues",
        "310": "Stacks & Queues",
        "311": "Stacks & Queues",
        "312": "Stacks & Queues",
        "313": "Stacks & Queues",
        "314": "Stacks & Queues",
        "315": "Stacks & Queues",
        "316": "Stacks & Queues",
        "317": "Stacks & Queues",
        "318": "Stacks & Queues",
        "319": "Stacks & Queues",
        "320": "Stacks & Queues",
        "321": "Stacks & Queues",
        "322": "Stacks & Queues",
        "323": "Stacks & Queues",
        "324": "Stacks & Queues",
        "325": "Stacks & Queues",
        "326": "Stacks & Queues",
        "327": "Stacks & Queues",
        "328": "Stacks & Queues",
        "329": "Stacks & Queues",
        "330": "Stacks & Queues",
        "331": "Stacks & Queues",
        "332": null,
        "333": null,
        "334": "Heap",
        "335": "Heap",
        "336": "Heap",
        "337": "Heap",
        "338": "Heap",
        "339": "Heap",
        "340": "Heap",
        "341": "Heap",
        "342": "Heap",
        "343": "Heap",
        "344": "Heap",
        "345": "Heap",
        "346": "Heap",
        "347": "Heap",
        "348": "Heap",
        "349": "Heap",
        "350": "Heap",
        "351": "Heap",
        "352": null,
        "353": null,
        "354": "Graph",
        "355": "Graph",
        "356": "Graph",
        "357": "Graph",
        "358": "Graph",
        "359": "Graph",
        "360": "Graph",
        "361": "Graph",
        "362": "Graph",
        "363": "Graph",
        "364": "Graph",
        "365": "Graph",
        "366": "Graph",
        "367": "Graph",
        "368": "Graph",
        "369": "Graph",
        "370": "Graph",
        "371": "Graph",
        "372": "Graph",
        "373": "Graph",
        "374": "Graph",
        "375": "Graph",
        "376": "Graph",
        "377": "Graph",
        "378": "Graph",
        "379": "Graph",
        "380": "Graph",
        "381": "Graph",
        "382": "Graph",
        "383": "Graph",
        "384": "Graph",
        "385": "Graph",
        "386": "Graph",
        "387": "Graph",
        "388": "Graph",
        "389": "Graph",
        "390": "Graph",
        "391": "Graph",
        "392": "Graph",
        "393": "Graph",
        "394": "Graph",
        "395": "Graph",
        "396": "Graph",
        "397": "Graph",
        "398": null,
        "399": null,
        "400": "Trie",
        "401": "Trie",
        "402": "Trie",
        "403": "Trie",
        "404": "Trie",
        "405": "Trie",
        "406": null,
        "407": null,
        "408": "Dynamic Programming",
        "409": "Dynamic Programming",
        "410": "Dynamic Programming",
        "411": "Dynamic Programming",
        "412": "Dynamic Programming",
        "413": "Dynamic Programming",
        "414": "Dynamic Programming",
        "415": "Dynamic Programming",
        "416": "Dynamic Programming",
        "417": "Dynamic Programming",
        "418": "Dynamic Programming",
        "419": "Dynamic Programming",
        "420": "Dynamic Programming",
        "421": "Dynamic Programming",
        "422": "Dynamic Programming",
        "423": "Dynamic Programming",
        "424": "Dynamic Programming",
        "425": "Dynamic Programming",
        "426": "Dynamic Programming",
        "427": "Dynamic Programming",
        "428": "Dynamic Programming",
        "429": "Dynamic Programming",
        "430": "Dynamic Programming",
        "431": "Dynamic Programming",
        "432": "Dynamic Programming",
        "433": "Dynamic Programming",
        "434": "Dynamic Programming",
        "435": "Dynamic Programming",
        "436": "Dynamic Programming",
        "437": "Dynamic Programming",
        "438": "Dynamic Programming",
        "439": "Dynamic Programming",
        "440": "Dynamic Programming",
        "441": "Dynamic Programming",
        "442": "Dynamic Programming",
        "443": "Dynamic Programming",
        "444": "Dynamic Programming",
        "445": "Dynamic Programming",
        "446": "Dynamic Programming",
        "447": "Dynamic Programming",
        "448": "Dynamic Programming",
        "449": "Dynamic Programming",
        "450": "Dynamic Programming",
        "451": "Dynamic Programming",
        "452": "Dynamic Programming",
        "453": "Dynamic Programming",
        "454": "Dynamic Programming",
        "455": "Dynamic Programming",
        "456": "Dynamic Programming",
        "457": "Dynamic Programming",
        "458": "Dynamic Programming",
        "459": "Dynamic Programming",
        "460": "Dynamic Programming",
        "461": "Dynamic Programming",
        "462": "Dynamic Programming",
        "463": "Dynamic Programming",
        "464": "Dynamic Programming",
        "465": "Dynamic Programming",
        "466": "Dynamic Programming",
        "467": "Dynamic Programming",
        "468": null,
        "469": null,
        "470": "Bit Manipulation",
        "471": "Bit Manipulation",
        "472": "Bit Manipulation",
        "473": "Bit Manipulation",
        "474": "Bit Manipulation",
        "475": "Bit Manipulation",
        "476": "Bit Manipulation",
        "477": "Bit Manipulation",
        "478": "Bit Manipulation",
        "479": "Bit Manipulation"
    },
    "Questions by Love Babbar:": {
        "0": "Youtube Channel: https:\/\/www.youtube.com\/channel\/UCQHLxxBFrbfdrk1jF0moTpw ",
        "1": null,
        "2": "Problem: ",
        "3": null,
        "4": "Reverse the array",
        "5": "Find the maximum and minimum element in an array",
        "6": "Find the \"Kth\" max and min element of an array ",
        "7": "Given an array which consists of only 0, 1 and 2. Sort the array without using any sorting algo",
        "8": "Move all the negative elements to one side of the array ",
        "9": "Find the Union and Intersection of the two sorted arrays.",
        "10": "Write a program to cyclically rotate an array by one.",
        "11": "find Largest sum contiguous Subarray [V. IMP]",
        "12": "Minimise the maximum difference between heights [V.IMP]",
        "13": "Minimum no. of Jumps to reach end of an array",
        "14": "find duplicate in an array of N+1 Integers",
        "15": "Merge 2 sorted arrays without using Extra space.",
        "16": "Kadane's Algo [V.V.V.V.V IMP]",
        "17": "Merge Intervals",
        "18": "Next Permutation",
        "19": "Count Inversion",
        "20": "Best time to buy and Sell stock",
        "21": "find all pairs on integer array whose sum is equal to given number",
        "22": "find common elements In 3 sorted arrays",
        "23": "Rearrange the array in alternating positive and negative items with O(1) extra space",
        "24": "Find if there is any subarray with sum equal to 0",
        "25": "Find factorial of a large number",
        "26": "find maximum product subarray ",
        "27": "Find longest coinsecutive subsequence",
        "28": "Given an array of size n and a number k, fin all elements that appear more than \" n\/k \" times.",
        "29": "Maximum profit by buying and selling a share atmost twice",
        "30": "Find whether an array is a subset of another array",
        "31": "Find the triplet that sum to a given value",
        "32": "Trapping Rain water problem",
        "33": "Chocolate Distribution problem",
        "34": "Smallest Subarray with sum greater than a given value",
        "35": "Three way partitioning of an array around a given value",
        "36": "Minimum swaps required bring elements less equal K together",
        "37": "Minimum no. of operations required to make an array palindrome",
        "38": "Median of 2 sorted arrays of equal size",
        "39": "Median of 2 sorted arrays of different size",
        "40": null,
        "41": null,
        "42": "Spiral traversal on a Matrix",
        "43": "Search an element in a matriix",
        "44": "Find median in a row wise sorted matrix",
        "45": "Find row with maximum no. of 1's",
        "46": "Print elements in sorted order using row-column wise sorted matrix",
        "47": "Maximum size rectangle",
        "48": "Find a specific pair in matrix",
        "49": "Rotate matrix by 90 degrees",
        "50": "Kth smallest element in a row-cpumn wise sorted matrix",
        "51": "Common elements in all rows of a given matrix",
        "52": null,
        "53": null,
        "54": "Reverse a String",
        "55": "Check whether a String is Palindrome or not",
        "56": "Find Duplicate characters in a string",
        "57": "Why strings are immutable in Java?",
        "58": "Write a Code to check whether one string is a rotation of another",
        "59": "Write a Program to check whether a string is a valid shuffle of two strings or not",
        "60": "Count and Say problem",
        "61": "Write a program to find the longest Palindrome in a string.[ Longest palindromic Substring]",
        "62": "Find Longest Recurring Subsequence in String",
        "63": "Print all Subsequences of a string.",
        "64": "Print all the permutations of the given string",
        "65": "Split the Binary string into two substring with equal 0\u2019s and 1\u2019s",
        "66": "Word Wrap Problem [VERY IMP].",
        "67": "EDIT Distance [Very Imp]",
        "68": "Find next greater number with same set of digits. [Very Very IMP]",
        "69": "Balanced Parenthesis problem.[Imp]",
        "70": "Word break Problem[ Very Imp]",
        "71": "Rabin Karp Algo",
        "72": "KMP Algo",
        "73": "Convert a Sentence into its equivalent mobile numeric keypad sequence.",
        "74": "Minimum number of bracket reversals needed to make an expression balanced.",
        "75": "Count All Palindromic Subsequence in a given String.",
        "76": "Count of number of given string in 2D character array",
        "77": "Search a Word in a 2D Grid of characters.",
        "78": "Boyer Moore Algorithm for Pattern Searching.",
        "79": "Converting Roman Numerals to Decimal",
        "80": "Longest Common Prefix",
        "81": "Number of flips to make binary string alternate",
        "82": "Find the first repeated word in string.",
        "83": "Minimum number of swaps for bracket balancing.",
        "84": "Find the longest common subsequence between two strings.",
        "85": "Program to generate all possible valid IP addresses from given  string.",
        "86": "Write a program tofind the smallest window that contains all characters of string itself.",
        "87": "Rearrange characters in a string such that no two adjacent are same",
        "88": "Minimum characters to be added at front to make string palindrome",
        "89": "Given a sequence of words, print all anagrams together",
        "90": "Find the smallest window in a string containing all characters of another string",
        "91": "Recursively remove all adjacent duplicates",
        "92": "String matching where one string contains wildcard characters",
        "93": "Function to find Number of customers who could not get a computer",
        "94": "Transform One String to Another using Minimum Number of Given Operation",
        "95": "Check if two given strings are isomorphic to each other",
        "96": "Recursively print all sentences that can be formed from list of word lists",
        "97": null,
        "98": null,
        "99": "Find first and last positions of an element in a sorted array",
        "100": "Find a Fixed Point (Value equal to index) in a given array",
        "101": "Search in a rotated sorted array",
        "102": "square root of an integer",
        "103": "Maximum and minimum of an array using minimum number of comparisons",
        "104": "Optimum location of point to minimize total distance",
        "105": "Find the repeating and the missing",
        "106": "find majority element",
        "107": "Searching in an array where adjacent differ by at most k",
        "108": "find a pair with a given difference",
        "109": "find four elements that sum to a given value",
        "110": "maximum sum such that no 2 elements are adjacent",
        "111": "Count triplet with sum smaller than a given value",
        "112": "merge 2 sorted arrays",
        "113": "print all subarrays with 0 sum",
        "114": "Product array Puzzle",
        "115": "Sort array according to count of set bits",
        "116": "minimum no. of swaps required to sort the array",
        "117": "Bishu and Soldiers",
        "118": "Rasta and Kheshtak",
        "119": "Kth smallest number again",
        "120": "Find pivot element in a sorted array",
        "121": "K-th Element of Two Sorted Arrays",
        "122": "Aggressive cows",
        "123": "Book Allocation Problem",
        "124": "EKOSPOJ:",
        "125": "Job Scheduling Algo",
        "126": "Missing Number in AP",
        "127": "Smallest number with atleastn trailing zeroes infactorial",
        "128": "Painters Partition Problem:",
        "129": "ROTI-Prata SPOJ",
        "130": "DoubleHelix SPOJ",
        "131": "Subset Sums",
        "132": "Findthe inversion count",
        "133": "Implement Merge-sort in-place",
        "134": "Partitioning and Sorting Arrays with Many Repeated Entries",
        "135": null,
        "136": null,
        "137": "Write a Program to reverse the Linked List. (Both Iterative and recursive)",
        "138": "Reverse a Linked List in group of Given Size. [Very Imp]",
        "139": "Write a program to Detect loop in a linked list.",
        "140": "Write a program to Delete loop in a linked list.",
        "141": "Find the starting point of the loop.\u00a0",
        "142": "Remove Duplicates in a sorted Linked List.",
        "143": "Remove Duplicates in a Un-sorted Linked List.",
        "144": "Write a Program to Move the last element to Front in a Linked List.",
        "145": "Add \u201c1\u201d to a number represented as a Linked List.",
        "146": "Add two numbers represented by linked lists.",
        "147": "Intersection of two Sorted Linked List.",
        "148": "Intersection Point of two Linked Lists.",
        "149": "Merge Sort For Linked lists.[Very Important]",
        "150": "Quicksort for Linked Lists.[Very Important]",
        "151": "Find the middle Element of a linked list.",
        "152": "Check if a linked list is a circular linked list.",
        "153": "Split a Circular linked list into two halves.",
        "154": "Write a Program to check whether the Singly Linked list is a palindrome or not.",
        "155": "Deletion from a Circular Linked List.",
        "156": "Reverse a Doubly Linked list.",
        "157": "Find pairs with a given sum in a DLL.",
        "158": "Count triplets in a sorted DLL whose sum is equal to given value \u201cX\u201d.",
        "159": "Sort a \u201ck\u201dsorted Doubly Linked list.[Very IMP]",
        "160": "Rotate DoublyLinked list by N nodes.",
        "161": "Rotate a Doubly Linked list in group of Given Size.[Very IMP]",
        "162": "Can we reverse a linked list in less than O(n) ?",
        "163": "Why Quicksort is preferred for. Arrays and Merge Sort for LinkedLists ?",
        "164": "Flatten a Linked List",
        "165": "Sort a LL of 0's, 1's and 2's",
        "166": "Clone a linked list with next and random pointer",
        "167": "Merge K sorted Linked list",
        "168": "Multiply 2 no. represented by LL",
        "169": "Delete nodes which have a greater value on right side",
        "170": "Segregate even and odd nodes in a Linked List",
        "171": "Program for n\u2019th node from the end of a Linked List",
        "172": "Find the first non-repeating character from a stream of characters",
        "173": null,
        "174": null,
        "175": "level order traversal",
        "176": "Reverse Level Order traversal",
        "177": "Height of a tree",
        "178": "Diameter of a tree",
        "179": "Mirror of a tree",
        "180": "Inorder Traversal of a tree both using recursion and Iteration",
        "181": "Preorder Traversal of a tree both using recursion and Iteration",
        "182": "Postorder Traversal of a tree both using recursion and Iteration",
        "183": "Left View of a tree",
        "184": "Right View of Tree",
        "185": "Top View of a tree",
        "186": "Bottom View of a tree",
        "187": "Zig-Zag traversal of a binary tree",
        "188": "Check if a tree is balanced or not",
        "189": "Diagnol Traversal of a Binary tree",
        "190": "Boundary traversal of a Binary tree",
        "191": "Construct Binary Tree from String with Bracket Representation",
        "192": "Convert Binary tree into Doubly Linked List",
        "193": "Convert Binary tree into Sum tree",
        "194": "Construct Binary tree from Inorder and preorder traversal",
        "195": "Find minimum swaps required to convert a Binary tree into BST",
        "196": "Check if Binary tree is Sum tree or not",
        "197": "Check if all leaf nodes are at same level or not",
        "198": "Check if a Binary Tree contains duplicate subtrees of size 2 or more [ IMP ]",
        "199": "Check if 2 trees are mirror or not",
        "200": "Sum of Nodes on the Longest path from root to leaf node ",
        "201": "Check if given graph is tree or not.  [ IMP ]",
        "202": "Find Largest subtree sum in a tree",
        "203": "Maximum Sum of nodes in Binary tree such that no two are adjacent ",
        "204": "Print all \"K\" Sum paths in a Binary tree",
        "205": "Find LCA in a Binary tree",
        "206": "Find distance between 2 nodes in a Binary tree",
        "207": "Kth Ancestor of node in a Binary tree",
        "208": "Find all Duplicate subtrees in a Binary tree [ IMP ]",
        "209": "Tree Isomorphism Problem",
        "210": null,
        "211": null,
        "212": "Fina a value in a BST",
        "213": "Deletion of a node in a BST",
        "214": "Find min and max value in a BST",
        "215": "Find inorder successor and inorder predecessor in a BST",
        "216": "Check if a tree is a BST or not ",
        "217": "Populate Inorder successor of all nodes",
        "218": "Find LCA  of 2 nodes in a BST",
        "219": "Construct BST from preorder traversal",
        "220": "Convert Binary tree into BST",
        "221": "Convert a normal BST into a Balanced BST",
        "222": "Merge two BST [ V.V.V>IMP ]",
        "223": "Find Kth largest element in a BST",
        "224": "Find Kth smallest element in a BST",
        "225": "Count pairs from 2 BST whose sum is equal to given value \"X\"",
        "226": "Find the median of BST in O(n) time and O(1) space",
        "227": "Count BST ndoes that lie in a given range",
        "228": "Replace every element with the least greater element on its right",
        "229": "Given \"n\" appointments, find the conflicting appointments",
        "230": "Check preorder is valid or not",
        "231": "Check whether BST contains Dead end",
        "232": "Largest BST in a Binary Tree [ V.V.V.V.V IMP ]",
        "233": "Flatten BST to sorted list",
        "234": null,
        "235": null,
        "236": "Activity Selection Problem",
        "237": "Job SequencingProblem",
        "238": "Huffman Coding",
        "239": "Water Connection Problem",
        "240": "Fractional Knapsack Problem",
        "241": "Greedy Algorithm to find Minimum number of Coins",
        "242": "Maximum trains for which stoppage can be provided",
        "243": "Minimum Platforms Problem",
        "244": "Buy Maximum Stocks if i stocks can be bought on i-th day",
        "245": "Find the minimum and maximum amount to buy all N candies",
        "246": "Minimize Cash Flow among a given set of friends who have borrowed money from each other",
        "247": "Minimum Cost to cut a board into squares",
        "248": "Check if it is possible to survive on Island",
        "249": "Find maximum meetings in one room",
        "250": "Maximum product subset of an array",
        "251": "Maximize array sum after K negations",
        "252": "Maximize the sum of arr[i]*i",
        "253": "Maximum sum of absolute difference of an array",
        "254": "Maximize sum of consecutive differences in a circular array",
        "255": "Minimum sum of absolute difference of pairs of two arrays",
        "256": "Program for Shortest Job First (or SJF) CPU Scheduling",
        "257": "Program for Least Recently Used (LRU) Page Replacement algorithm",
        "258": "Smallest subset with sum greater than all other elements",
        "259": "Chocolate Distribution Problem",
        "260": "DEFKIN -Defense of a Kingdom",
        "261": "DIEHARD -DIE HARD",
        "262": "GERGOVIA -Wine trading in Gergovia",
        "263": "Picking Up Chicks",
        "264": "CHOCOLA \u2013Chocolate",
        "265": "ARRANGE -Arranging Amplifiers",
        "266": "K Centers Problem",
        "267": "Minimum Cost of ropes",
        "268": "Find smallest number with given number of digits and sum of digits",
        "269": "Rearrange characters in a string such that no two adjacent are same",
        "270": "Find maximum sum possible equal sum of three stacks",
        "271": null,
        "272": null,
        "273": "Rat in a maze Problem",
        "274": "Printing all solutions in N-Queen Problem",
        "275": "Word Break Problem using Backtracking",
        "276": "Remove Invalid Parentheses",
        "277": "Sudoku Solver",
        "278": "m Coloring Problem",
        "279": "Print all palindromic partitions of a string",
        "280": "Subset Sum Problem",
        "281": "The Knight\u2019s tour problem",
        "282": "Tug of War",
        "283": "Find shortest safe route in a path with landmines",
        "284": "Combinational Sum",
        "285": "Find Maximum number possible by doing at-most K swaps",
        "286": "Print all permutations of a string ",
        "287": "Find if there is a path of more than k length from a source",
        "288": "Longest Possible Route in a Matrix with Hurdles",
        "289": "Print all possible paths from top left to bottom right of a mXn matrix",
        "290": "Partition of a set intoK subsets with equal sum",
        "291": "Find the K-th Permutation Sequence of first N natural numbers",
        "292": null,
        "293": null,
        "294": " Implement Stack from Scratch",
        "295": " Implement Queue from Scratch",
        "296": "Implement 2 stack in an array",
        "297": "find the middle element of a stack",
        "298": "Implement \"N\" stacks in an Array",
        "299": "Check the expression has valid or Balanced parenthesis or not.",
        "300": "Reverse a String using Stack",
        "301": "Design a Stack that supports getMin() in O(1) time and O(1) extra space.",
        "302": "Find the next Greater element",
        "303": "The celebrity Problem",
        "304": "Arithmetic Expression evaluation",
        "305": "Evaluation of Postfix expression",
        "306": "Implement a method to insert an element at its bottom without using any other data structure.",
        "307": "Reverse a stack using recursion",
        "308": "Sort a Stack using recursion",
        "309": "Merge Overlapping Intervals",
        "310": "Largest rectangular Area in Histogram",
        "311": "Length of the Longest Valid Substring",
        "312": "Expression contains redundant bracket or not",
        "313": "Implement Stack using Queue",
        "314": "Implement Stack using Deque",
        "315": "Stack Permutations (Check if an array is stack permutation of other)",
        "316": "Implement Queue using Stack  ",
        "317": "Implement \"n\" queue in an array",
        "318": "Implement a Circular queue",
        "319": "LRU Cache Implementationa",
        "320": "Reverse a Queue using recursion",
        "321": "Reverse the first \u201cK\u201d elements of a queue",
        "322": "Interleave the first half of the queue with second half",
        "323": "Find the first circular tour that visits all Petrol Pumps",
        "324": "Minimum time required to rot all oranges",
        "325": "Distance of nearest cell having 1 in a binary matrix",
        "326": "First negative integer in every window of size \u201ck\u201d",
        "327": "Check if all levels of two trees are anagrams or not.",
        "328": "Sum of minimum and maximum elements of all subarrays of size \u201ck\u201d.",
        "329": "Minimum sum of squares of character counts in a given string after removing \u201ck\u201d characters.",
        "330": "Queue based approach or first non-repeating character in a stream.",
        "331": "Next Smaller Element",
        "332": null,
        "333": null,
        "334": "Implement a Maxheap\/MinHeap using arrays and recursion.",
        "335": "Sort an Array using heap. (HeapSort)",
        "336": "Maximum of all subarrays of size k.",
        "337": "\u201ck\u201d largest element in an array",
        "338": "Kth smallest and largest element in an unsorted array",
        "339": "Merge \u201cK\u201d sorted arrays. [ IMP ]",
        "340": "Merge 2 Binary Max Heaps",
        "341": "Kth largest sum continuous subarrays",
        "342": "Leetcode- reorganize strings",
        "343": "Merge \u201cK\u201d Sorted Linked Lists [V.IMP]",
        "344": "Smallest range in \u201cK\u201d Lists",
        "345": "Median in a stream of Integers",
        "346": "Check if a Binary Tree is Heap",
        "347": "Connect \u201cn\u201d ropes with minimum cost",
        "348": "Convert BST to Min Heap",
        "349": "Convert min heap to max heap",
        "350": "Rearrange characters in a string such that no two adjacent are same.",
        "351": "Minimum sum of two numbers formed from digits of an array",
        "352": null,
        "353": null,
        "354": "Create a Graph, print it",
        "355": "Implement BFS algorithm ",
        "356": "Implement DFS Algo ",
        "357": "Detect Cycle in Directed Graph using BFS\/DFS Algo ",
        "358": "Detect Cycle in UnDirected Graph using BFS\/DFS Algo ",
        "359": "Search in a Maze",
        "360": "Minimum Step by Knight",
        "361": "flood fill algo",
        "362": "Clone a graph",
        "363": "Making wired Connections",
        "364": "word Ladder ",
        "365": "Dijkstra algo",
        "366": "Implement Topological Sort ",
        "367": "Minimum time taken by each job to be completed given by a Directed Acyclic Graph",
        "368": "Find whether it is possible to finish all tasks or not from given dependencies",
        "369": "Find the no. of Isalnds",
        "370": "Given a sorted Dictionary of an Alien Language, find order of characters",
        "371": "Implement Kruksal\u2019sAlgorithm",
        "372": "Implement Prim\u2019s Algorithm",
        "373": "Total no. of Spanning tree in a graph",
        "374": "Implement Bellman Ford Algorithm",
        "375": "Implement Floyd warshallAlgorithm",
        "376": "Travelling Salesman Problem",
        "377": "Graph ColouringProblem",
        "378": "Snake and Ladders Problem",
        "379": "Find bridge in a graph",
        "380": "Count Strongly connected Components(Kosaraju Algo)",
        "381": "Check whether a graph is Bipartite or Not",
        "382": "Detect Negative cycle in a graph",
        "383": "Longest path in a Directed Acyclic Graph",
        "384": "Journey to the Moon",
        "385": "Cheapest Flights Within K Stops",
        "386": "Oliver and the Game",
        "387": "Water Jug problem using BFS",
        "388": "Water Jug problem using BFS",
        "389": "Find if there is a path of more thank length from a source",
        "390": "M-ColouringProblem",
        "391": "Minimum edges to reverse o make path from source to destination",
        "392": "Paths to travel each nodes using each edge(Seven Bridges)",
        "393": "Vertex Cover Problem",
        "394": "Chinese Postman or Route Inspection",
        "395": "Number of Triangles in a Directed and Undirected Graph",
        "396": "Minimise the cashflow among a given set of friends who have borrowed money from each other",
        "397": "Two Clique Problem",
        "398": null,
        "399": null,
        "400": "Construct a trie from scratch",
        "401": "Find shortest unique prefix for every word in a given list",
        "402": "Word Break Problem | (Trie solution)",
        "403": "Given a sequence of words, print all anagrams together",
        "404": "Implement a Phone Directory",
        "405": "Print unique rows in a given boolean matrix",
        "406": null,
        "407": null,
        "408": "Coin ChangeProblem",
        "409": "Knapsack Problem",
        "410": "Binomial CoefficientProblem",
        "411": "Permutation CoefficientProblem",
        "412": "Program for nth Catalan Number",
        "413": "Matrix Chain Multiplication\u00a0",
        "414": "Edit Distance",
        "415": "Subset Sum Problem",
        "416": "Friends Pairing Problem",
        "417": "Gold Mine Problem",
        "418": "Assembly Line SchedulingProblem",
        "419": "Painting the Fenceproblem",
        "420": "Maximize The Cut Segments",
        "421": "Longest Common Subsequence",
        "422": "Longest Repeated Subsequence",
        "423": "Longest Increasing Subsequence",
        "424": "Space Optimized Solution of LCS",
        "425": "LCS (Longest Common Subsequence) of three strings",
        "426": "Maximum Sum Increasing Subsequence",
        "427": "Count all subsequences having product less than K",
        "428": "Longest subsequence such that difference between adjacent is one",
        "429": "Maximum subsequence sum such that no three are consecutive",
        "430": "Egg Dropping Problem",
        "431": "Maximum Length Chain of Pairs",
        "432": "Maximum size square sub-matrix with all 1s",
        "433": "Maximum sum of pairs with specific difference",
        "434": "Min Cost PathProblem",
        "435": "Maximum difference of zeros and ones in binary string",
        "436": "Minimum number of jumps to reach end",
        "437": "Minimum cost to fill given weight in a bag",
        "438": "Minimum removals from array to make max \u2013min <= K",
        "439": "Longest Common Substring",
        "440": "Count number of ways to reacha given score in a game",
        "441": "Count Balanced Binary Trees of Height h",
        "442": "LargestSum Contiguous Subarray [V>V>V>V IMP ]",
        "443": "Smallest sum contiguous subarray",
        "444": "Unbounded Knapsack (Repetition of items allowed)",
        "445": "Word Break Problem",
        "446": "Largest Independent Set Problem",
        "447": "Partition problem",
        "448": "Longest Palindromic Subsequence",
        "449": "Count All Palindromic Subsequence in a given String",
        "450": "Longest Palindromic Substring",
        "451": "Longest alternating subsequence",
        "452": "Weighted Job Scheduling",
        "453": "Coin game winner where every player has three choices",
        "454": "Count Derangements (Permutation such that no element appears in its original position) [ IMPORTANT ]",
        "455": "Maximum profit by buying and selling a share at most twice [ IMP ]",
        "456": "Optimal Strategy for a Game",
        "457": "Optimal Binary Search Tree",
        "458": "Palindrome PartitioningProblem",
        "459": "Word Wrap Problem",
        "460": "Mobile Numeric Keypad Problem [ IMP ]",
        "461": "Boolean Parenthesization Problem",
        "462": "Largest rectangular sub-matrix whose sum is 0",
        "463": "Largest area rectangular sub-matrix with equal number of 1\u2019s and 0\u2019s [ IMP ]",
        "464": "Maximum sum rectangle in a 2D matrix",
        "465": "Maximum profit by buying and selling a share at most k times",
        "466": "Find if a string is interleaved of two other strings",
        "467": "Maximum Length of Pair Chain",
        "468": null,
        "469": null,
        "470": "Count set bits in an integer",
        "471": "Find the two non-repeating elements in an array of repeating elements",
        "472": "Count number of bits to be flipped to convert A to B",
        "473": "Count total set bits in all numbers from 1 to n",
        "474": "Program to find whether a no is power of two",
        "475": "Find position of the only set bit",
        "476": "Copy set bits in a range",
        "477": "Divide two integers without using multiplication, division and mod operator",
        "478": "Calculate square of a number without using *, \/ and pow()",
        "479": "Power Set"
    },
    "Unnamed: 2": {
        "0": null,
        "1": null,
        "2": "Done [yes or no] ",
        "3": "yes",
        "4": "yes",
        "5": "yes",
        "6": "yes",
        "7": "yes",
        "8": "yes",
        "9": "yes",
        "10": "yes",
        "11": "yes",
        "12": "<->",
        "13": "yes",
        "14": "yes",
        "15": null,
        "16": " yes",
        "17": "<->",
        "18": "<->",
        "19": "<->",
        "20": "<->",
        "21": "<->",
        "22": "<->",
        "23": "<->",
        "24": "<->",
        "25": "<->",
        "26": "<->",
        "27": "<->",
        "28": "<->",
        "29": "<->",
        "30": "<->",
        "31": "<->",
        "32": "<->",
        "33": "<->",
        "34": "<->",
        "35": "<->",
        "36": "<->",
        "37": "<->",
        "38": "<->",
        "39": "<->",
        "40": "<->",
        "41": "<->",
        "42": "<->",
        "43": "<->",
        "44": "<->",
        "45": "<->",
        "46": "<->",
        "47": "<->",
        "48": "<->",
        "49": "<->",
        "50": "<->",
        "51": "<->",
        "52": null,
        "53": null,
        "54": "<->",
        "55": "<->",
        "56": "<->",
        "57": "<->",
        "58": "<->",
        "59": "<->",
        "60": "<->",
        "61": "<->",
        "62": "<->",
        "63": "<->",
        "64": "<->",
        "65": "<->",
        "66": "<->",
        "67": "<->",
        "68": "<->",
        "69": "<->",
        "70": "<->",
        "71": "<->",
        "72": "<->",
        "73": "<->",
        "74": "<->",
        "75": "<->",
        "76": "<->",
        "77": "<->",
        "78": "<->",
        "79": "<->",
        "80": "<->",
        "81": "<->",
        "82": "<->",
        "83": "<->",
        "84": "<->",
        "85": "<->",
        "86": "<->",
        "87": "<->",
        "88": "<->",
        "89": "<->",
        "90": "<->",
        "91": "<->",
        "92": "<->",
        "93": "<->",
        "94": "<->",
        "95": "<->",
        "96": "<->",
        "97": null,
        "98": null,
        "99": "<->",
        "100": "<->",
        "101": "<->",
        "102": "<->",
        "103": "<->",
        "104": "<->",
        "105": "<->",
        "106": "<->",
        "107": "<->",
        "108": "<->",
        "109": "<->",
        "110": "<->",
        "111": "<->",
        "112": "<->",
        "113": "<->",
        "114": "<->",
        "115": "<->",
        "116": "<->",
        "117": "<->",
        "118": "<->",
        "119": "<->",
        "120": "<->",
        "121": "<->",
        "122": "<->",
        "123": "<->",
        "124": "<->",
        "125": "<->",
        "126": "<->",
        "127": "<->",
        "128": "<->",
        "129": "<->",
        "130": "<->",
        "131": "<->",
        "132": "<->",
        "133": "<->",
        "134": "<->",
        "135": null,
        "136": null,
        "137": "<->",
        "138": "<->",
        "139": "<->",
        "140": "<->",
        "141": "<->",
        "142": "<->",
        "143": "<->",
        "144": "<->",
        "145": "<->",
        "146": "<->",
        "147": "<->",
        "148": "<->",
        "149": "<->",
        "150": "<->",
        "151": "<->",
        "152": "<->",
        "153": "<->",
        "154": "<->",
        "155": "<->",
        "156": "<->",
        "157": "<->",
        "158": "<->",
        "159": "<->",
        "160": "<->",
        "161": "<->",
        "162": "<->",
        "163": "<->",
        "164": "<->",
        "165": "<->",
        "166": "<->",
        "167": "<->",
        "168": "<->",
        "169": "<->",
        "170": "<->",
        "171": "<->",
        "172": "<->",
        "173": null,
        "174": null,
        "175": "<->",
        "176": "<->",
        "177": "<->",
        "178": "<->",
        "179": "<->",
        "180": "<->",
        "181": "<->",
        "182": "<->",
        "183": "<->",
        "184": "<->",
        "185": "<->",
        "186": "<->",
        "187": "<->",
        "188": "<->",
        "189": "<->",
        "190": "<->",
        "191": "<->",
        "192": "<->",
        "193": "<->",
        "194": "<->",
        "195": "<->",
        "196": "<->",
        "197": "<->",
        "198": "<->",
        "199": "<->",
        "200": "<->",
        "201": "<->",
        "202": "<->",
        "203": "<->",
        "204": "<->",
        "205": "<->",
        "206": "<->",
        "207": "<->",
        "208": "<->",
        "209": "<->",
        "210": null,
        "211": null,
        "212": "<->",
        "213": "<->",
        "214": "<->",
        "215": "<->",
        "216": "<->",
        "217": "<->",
        "218": "<->",
        "219": "<->",
        "220": "<->",
        "221": "<->",
        "222": "<->",
        "223": "<->",
        "224": "<->",
        "225": "<->",
        "226": "<->",
        "227": "<->",
        "228": "<->",
        "229": "<->",
        "230": "<->",
        "231": "<->",
        "232": "<->",
        "233": "<->",
        "234": null,
        "235": null,
        "236": "<->",
        "237": "<->",
        "238": "<->",
        "239": "<->",
        "240": "<->",
        "241": "<->",
        "242": "<->",
        "243": "<->",
        "244": "<->",
        "245": "<->",
        "246": "<->",
        "247": "<->",
        "248": "<->",
        "249": "<->",
        "250": "<->",
        "251": "<->",
        "252": "<->",
        "253": "<->",
        "254": "<->",
        "255": "<->",
        "256": "<->",
        "257": "<->",
        "258": "<->",
        "259": "<->",
        "260": "<->",
        "261": "<->",
        "262": "<->",
        "263": "<->",
        "264": "<->",
        "265": "<->",
        "266": "<->",
        "267": "<->",
        "268": "<->",
        "269": "<->",
        "270": "<->",
        "271": null,
        "272": null,
        "273": "<->",
        "274": "<->",
        "275": "<->",
        "276": "<->",
        "277": "<->",
        "278": "<->",
        "279": "<->",
        "280": "<->",
        "281": "<->",
        "282": "<->",
        "283": "<->",
        "284": "<->",
        "285": "<->",
        "286": "<->",
        "287": "<->",
        "288": "<->",
        "289": "<->",
        "290": "<->",
        "291": "<->",
        "292": null,
        "293": null,
        "294": "<->",
        "295": "<->",
        "296": "<->",
        "297": "<->",
        "298": "<->",
        "299": "<->",
        "300": "<->",
        "301": "<->",
        "302": "<->",
        "303": "<->",
        "304": "<->",
        "305": "<->",
        "306": "<->",
        "307": "<->",
        "308": "<->",
        "309": "<->",
        "310": "<->",
        "311": "<->",
        "312": "<->",
        "313": "<->",
        "314": "<->",
        "315": "<->",
        "316": "<->",
        "317": "<->",
        "318": "<->",
        "319": "<->",
        "320": "<->",
        "321": "<->",
        "322": "<->",
        "323": "<->",
        "324": "<->",
        "325": "<->",
        "326": "<->",
        "327": "<->",
        "328": "<->",
        "329": "<->",
        "330": "<->",
        "331": "<->",
        "332": null,
        "333": null,
        "334": "<->",
        "335": "<->",
        "336": "<->",
        "337": "<->",
        "338": "<->",
        "339": "<->",
        "340": "<->",
        "341": "<->",
        "342": "<->",
        "343": "<->",
        "344": "<->",
        "345": "<->",
        "346": "<->",
        "347": "<->",
        "348": "<->",
        "349": "<->",
        "350": "<->",
        "351": "<->",
        "352": null,
        "353": null,
        "354": "<->",
        "355": "<->",
        "356": "<->",
        "357": "<->",
        "358": "<->",
        "359": "<->",
        "360": "<->",
        "361": "<->",
        "362": "<->",
        "363": "<->",
        "364": "<->",
        "365": "<->",
        "366": "<->",
        "367": "<->",
        "368": "<->",
        "369": "<->",
        "370": "<->",
        "371": "<->",
        "372": "<->",
        "373": "<->",
        "374": "<->",
        "375": "<->",
        "376": "<->",
        "377": "<->",
        "378": "<->",
        "379": "<->",
        "380": "<->",
        "381": "<->",
        "382": "<->",
        "383": "<->",
        "384": "<->",
        "385": "<->",
        "386": "<->",
        "387": "<->",
        "388": "<->",
        "389": "<->",
        "390": "<->",
        "391": "<->",
        "392": "<->",
        "393": "<->",
        "394": "<->",
        "395": "<->",
        "396": "<->",
        "397": "<->",
        "398": null,
        "399": null,
        "400": "<->",
        "401": "<->",
        "402": "<->",
        "403": "<->",
        "404": "<->",
        "405": "<->",
        "406": null,
        "407": null,
        "408": "<->",
        "409": "<->",
        "410": "<->",
        "411": "<->",
        "412": "<->",
        "413": "<->",
        "414": "<->",
        "415": "<->",
        "416": "<->",
        "417": "<->",
        "418": "<->",
        "419": "<->",
        "420": "<->",
        "421": "<->",
        "422": "<->",
        "423": "<->",
        "424": "<->",
        "425": "<->",
        "426": "<->",
        "427": "<->",
        "428": "<->",
        "429": "<->",
        "430": "<->",
        "431": "<->",
        "432": "<->",
        "433": "<->",
        "434": "<->",
        "435": "<->",
        "436": "<->",
        "437": "<->",
        "438": "<->",
        "439": "<->",
        "440": "<->",
        "441": "<->",
        "442": "<->",
        "443": "<->",
        "444": "<->",
        "445": "<->",
        "446": "<->",
        "447": "<->",
        "448": "<->",
        "449": "<->",
        "450": "<->",
        "451": "<->",
        "452": "<->",
        "453": "<->",
        "454": "<->",
        "455": "<->",
        "456": "<->",
        "457": "<->",
        "458": "<->",
        "459": "<->",
        "460": "<->",
        "461": "<->",
        "462": "<->",
        "463": "<->",
        "464": "<->",
        "465": "<->",
        "466": "<->",
        "467": "<->",
        "468": null,
        "469": null,
        "470": "<->",
        "471": "<->",
        "472": "<->",
        "473": "<->",
        "474": "<->",
        "475": "<->",
        "476": "<->",
        "477": "<->",
        "478": "<->",
        "479": "<->"
    }
}